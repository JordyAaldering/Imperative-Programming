/*********************************************************************
*   Voorbeeldraamwerk voor opdracht 9 IPC031.
*   Inhoud:
*   - de type definities voor de muziek-database voor *arrays* (zelf omzetten naar vector, zie opdracht 1)
*   - ordeningsrelaties op Track;
*   - inlezen van Nummers.txt bestand;
*   - functies en datastructuren uit hoorcollege #9 IPC031:
*   - sorteer-algoritmen insertion_sort, selection_sort, bubble_sort
*     (gebaseerd op *arrays*, zelf omzetten naar vector)
*   - main die Nummers.txt inleest en een sorteer-algoritme aanroept.
**********************************************************************/
#define NDEBUG
#include <iostream>
#include <fstream>
#include <string>
#include <cstdlib>
#include <cstring>
#include <vector>
#include <cassert>

using namespace std;

/*
//Jordy Aaldering      // s1004292 // Informatica
//Thomas van Harskamp  // s1007576 // Informatica en Wiskunde
Note: we used lower case convertion for a correct alphabetic order, this is why our results may differ in some cases.
*/

/*********************************************************************
*   MuziekDB type definities en globale array liedjes:
**********************************************************************/
struct Length
{
	int minutes;							// #minuten  (0..)
	int seconds;							// #seconden (0..59)
};
struct Track
{
	string artist;                          // naam van uitvoerende artiest
	string cd;                              // titel van cd
	int    year;                            // jaar van uitgave
	int    track;							// nummer van track
	string title;                           // titel van track
	string tags;                            // tags van track
	Length time;							// lengte van track
	string country;                         // land van artiest
};

vector <Track> liedjes;
int comparison_counter;

/************************************************************************
*   Ordenings-relaties op Track:
*      definieer zelf < en == voor Length en Track, dan volgen
*      de overige ordeningen (>, <=, >=, >) daar vanzelf uit.
************************************************************************/

int size (vector<Track> v)
{
    return static_cast<int> (v.size());
}

void lower_case_convertion (string& a)
{
    //Precondition:
    assert (true);
    /* Postcondition:
    All letters in the string are converted to lower case, to ensure the alphabetic order is correct.
    */
    int l = a.length ();
    for (int i = 0; i < l; i++)
    {
        if (a [i] >= 65 && a [i] <= 90)
            a[i] += 32;
    }
}

/////////////This is the code for part 3:////////////

bool operator<(const Length& a, const Length& b)
{
    if (a.minutes == b.minutes)
        return a.seconds < b.seconds;
    else
        return a.minutes < b.minutes;
}

bool operator==(const Length& a, const Length& b)
{
    return (a.minutes == b.minutes && a.seconds == b.seconds);
}

bool operator<(const Track& a2, const Track& b2)
{
    comparison_counter++;
    Track a = a2, b = b2;
    lower_case_convertion (a.artist);
    lower_case_convertion (b.artist);
    lower_case_convertion (a.title);
    lower_case_convertion (b.title);
    lower_case_convertion (a.cd);
    lower_case_convertion (b.cd);

    if (a.time == b.time)
    {
        if (a.artist == b.artist)
        {
            if (a.title == b.title)
            {
                return a.cd < b.cd;
            }
            else
                return a.title < b.title;
        }
        else
            return a.artist < b.artist;
    }
    else
        return a.time < b.time;
}

bool operator==(const Track& a, const Track& b)
{
    comparison_counter++;
    return (a.time == b.time && a.artist == b.artist && a.title == b.title && a.cd == b.cd);
}

/////////////////End code for part 3//////////////////////

///////////// This is the code for part 1://////////////////////
/*
bool operator<(const Track& a2, const Track& b2)
{
    comparison_counter++;
    Track a = a2, b = b2;
    lower_case_convertion (a.artist);
    lower_case_convertion (b.artist);
    lower_case_convertion (a.cd);
    lower_case_convertion (b.cd);
    if (a.artist == b.artist)
    {
        if (a.cd == b.cd)
        {
            if (a.year == b.year)
            {
                return a.track < b.track;
            }
            else
                return a.year < b.year;
        }
        else
            return a.cd < b.cd;
    }
    else
        return a.artist < b.artist;
}

bool operator==(const Track& a, const Track& b)
{
    comparison_counter++;
    return (a.artist == b.artist && a.cd == b.cd && a.year == b.year && a.track == b.track);
}
*/
/////////////////End code for part 1////////////////////

//	afgeleide ordeningen op Track waarden:
bool operator>(const Track& a, const Track& b)
{
	return b < a;
}

bool operator<=(const Track& a, const Track& b)
{
	return !(b < a);
}

bool operator>=(const Track& a, const Track& b)
{
	return b <= a;
}


/************************************************************************
*   Inlezen van Nummers.txt bestand:
************************************************************************/
istream& operator>> (istream& in, Length& lengte)
{
    char colon ;
    in >> lengte.minutes >> colon >> lengte.seconds ;
    return in ;
}

ostream& operator<< (ostream& out, const Length lengte)
{
    out << lengte.minutes << ':' ;
    if (lengte.seconds < 10)
        out << '0' ;
    out << lengte.seconds ;
    return out ;
}

istream& operator>> (istream& infile, Track& track)
{
    string dummy;
    getline(infile,track.artist);       // artist
    getline(infile,track.cd);           // cd
    infile >> track.year ;              // year
    getline(infile, dummy) ;            // verwijder t/m newline
    infile >> track.track ;             // track nr
    getline(infile, dummy) ;            // verwijder t/m newline
    getline(infile,track.title);        // track title
    getline(infile,track.tags);         // track tags
    infile >> track.time ;              // track time
    getline(infile, dummy) ;            // verwijder t/m newline
    getline(infile,track.country);      // country
    getline(infile, dummy) ;            // verwijder t/m newline
    return infile ;
}

ostream& operator<< (ostream& out, const Track track)
{
    out << track.artist << " " << track.cd << " [" << track.track << "] (" << track.time << ")" ;
    return out ;
}

typedef Track El;

int lees_liedjes(ifstream& infile, vector<Track>& liedjes)
{
    int aantal_ingelezen_liedjes = 0;
    do {
        Track volgende;
        infile >> volgende;
        if (infile)
        {
            liedjes.push_back(volgende);
            aantal_ingelezen_liedjes++;
        }
    }
    while (infile);  //&& aantal_ingelezen_liedjes < MAX_AANTAL_LIEDJES);  ??? waarom staat dit erbij?
    return aantal_ingelezen_liedjes ;
}

int lees_bestand (string bestandnaam)
{
    ifstream nummersDBS (bestandnaam.c_str());
    if (!nummersDBS)
    {
        cout << "Kon '" << bestandnaam << "' niet openen." << endl;
        return -1;
    }
    cout << "Lees '" << bestandnaam << "' in." << endl;
	int aantal = lees_liedjes (nummersDBS, liedjes);
	nummersDBS.close();
	return aantal;
}

void toon_MuziekDB (vector<Track> liedjes, int aantalLiedjes)
{
    for (int i = 0 ; i < aantalLiedjes; i++)
        cout << i+1 << ". " << liedjes[i] << endl ;
}

struct Slice
{
	int from; 	// 0    <= from
	int to; 	// from <= to
};

Slice mkSlice (int from, int to)
{
//	pre-condition:
	assert (0 <= from && from <= to);
	Slice s = { from, to };
	return s;
}

bool valid_slice (Slice s)
{
	return 0 <= s.from && s.from <= s.to;
}

void comparison_output (ofstream& outputfile)
{
    //  Precondition:
    assert (outputfile.is_open());
    /*  Postcondition:
        The comparison counter is shown in an output file written as stars for 100000's and dots for remainders.
    */
    int i;
    for (i = comparison_counter; i >= 100000; i -= 100000)
        outputfile.put('*');
    if (i > 0)
        outputfile.put('.');
    outputfile.put('\n');
}

bool is_sorted (vector<El> trackvector, Slice s)
{
    //Preconditions:
	assert (valid_s0lice(s));
	/*postconditions:
      Result is true if	array[s.from]   <= array[s.from+1]
						array[s.from+1] <= array[s.from+2]
                                       ....
						array[s.to-1]   <= array[s.to]
    */
	bool sorted = true;
	for (int i = s.from; i < s.to && sorted; i++)
		if (trackvector[i] > trackvector[i+1])
			sorted = false;
	return sorted;
}

int find_position (vector<El> trackvector, Slice s, El y)
{
    //Preconditions:
	assert (valid_slice(s) && is_sorted(trackvector,s));
    /*Postconditions:
      s.from <= result <= s.to+1
    */
	for (int i = s.from ; i <= s.to ; i++)
		if (y <= trackvector [i])
			return i;
	return s.to+1;
}

void shift_right (vector<El>& trackvector, Slice s)
{
    //Preconditions:
	assert (valid_slice (s));
    /*Postconditions:
      array[s.from+1] = old array[s.from]
      array[s.from+2] = old array[s.from+1]
                     ...
      array[s.to+1]	  = old array[s.to]
    */
	for (int i = s.to+1; i > s.from ; i--)
		trackvector [i]  = trackvector [i-1];
}

void insert (vector<El>& trackvector, int& length, El y)
{
	const int pos = find_position (trackvector, mkSlice (0, length-1), y);
	if (pos < length)
		shift_right (trackvector, mkSlice (pos, length-1));
	trackvector [pos] = y;
	length++;
}

void swap (vector<El>& trackvector, int  i, int  j)
{
    //Preconditions:
	assert ( i >= 0 && j >= 0 );
    /*Postconditions:
      array[i] = old array[j]
      array[j] = old array[i]
    */
	const El help = trackvector [i];
	trackvector [i] = trackvector [j] ;
	trackvector [j] = help;
}

//	array-based insertion sort:
void insertion_sort (vector<El>& trackvector, int length, ofstream& outputfile)
{
	int sorted = 1 ;
    while ( sorted < length )
    {   insert ( trackvector, sorted, trackvector[sorted] ) ;
        if (sorted % 100 == 99)
            comparison_output(outputfile);
    }
}

//	array-based selection sort:
int smallest_value_at (vector<El> trackvector, Slice s)
{
//	pre-condition:
	assert (valid_slice (s)) ;	// ... and s.to < size (s)
//	Post-condition: s.from <= result <= s.to and array[result] is
//	the minimum value of array[s.from] .. array[s.to]
	int  smallest_at = s.from ;
	for ( int index = s.from+1 ; index <= s.to ; index++ )
		if ( trackvector [index] < trackvector [smallest_at] )
			smallest_at = index ;
	return smallest_at ;
}

void selection_sort (vector<El>& trackvector, int length, ofstream& outputfile)
{	for ( int unsorted = 0 ; unsorted < length ; unsorted++ )
	{   const int k = smallest_value_at (trackvector, mkSlice (unsorted, length-1));
	    swap ( trackvector, unsorted, k ) ;
	    if ((length - 1 - unsorted) % 100 == 99)
            comparison_output(outputfile);
	}
}

bool bubble (vector<El>& trackvector, Slice s)
{
//	pre-condition:
	assert (valid_slice(s));	// ... and s.to < size(array)
//	Post-condition:
//	maximum of array[s.from]..array[s.to] is at array[s.to]
//	if result is true then sorted( array, s )
	bool is_sorted = true ;
	for ( int i = s.from ; i < s.to ; i++)
	    if (trackvector [i] > trackvector [i+1])
		{	swap ( trackvector, i, i+1 ) ;
			is_sorted = false ;
		}
	return is_sorted ;
}

void bubble_sort (vector<El>& trackvector, int length, ofstream& outputfile)
{
    int n;
    n = size(trackvector);
    while ( !bubble ( trackvector, mkSlice (0, length-1 ) ) )
    {
        if ((n - 1 - length) % 100 == 99)
            comparison_output(outputfile);
        length-- ;
    }
}
/////////////////////////////Code for assignment 10 bonus://///////////////////////

bool push_up (vector<El>& tree, int treeSize)
{
    //  Pre-condition:
    assert (true);
    /*  Post-condition:
        If a child is larger than its parent, the two are swapped.
    */
    bool isSorted = true;

    for (int childPos = 0; childPos < treeSize; childPos++)
    {
        int parentPos = 0;
        if  (childPos > 2)
            parentPos = (childPos - 1) / 2;

        if (tree[childPos] > tree[parentPos])
        {
            isSorted = false;
            swap (tree, childPos, parentPos);
        }
    }
    return isSorted;
}

void push_down (vector<El>& tree, int heapSize)
{
    //Preconditions:
    assert (heapSize >= 0);
    /*Postconditions:
      The parent keeps swapping with its largest child,
      as long as the value of the parent is lower than that child.
    */
    int parentPos = 0, child1Pos = 1, child2Pos = 2;

    while ((tree[parentPos] < tree[child1Pos] || tree[parentPos] < tree[child2Pos]) && child2Pos < heapSize)
    {
        if (tree[child1Pos] > tree[child2Pos])
        {
            swap (tree, parentPos, child1Pos);
            parentPos = child1Pos;
        }
        else
        {
            swap (tree, parentPos, child2Pos);
            parentPos = child2Pos;
        }
        child1Pos = 2 * parentPos + 1;
        child2Pos = child1Pos + 1;
    }
}

void show_heap (vector<El>& tree, int treeSize)
{
    //Preconditions:
    assert (true);
    /*Postconditions:
      The tree is shown to the user.
    */
    cout << "Heap:";
    for (int i = 0; i < treeSize; i++)
    	cout << tree[i].artist << endl;
}

void heap_sort (vector<El>& tree, int treeSize, ofstream& outputfile)
{
	while (!push_up(tree, treeSize));
	show_heap (tree, treeSize);
	for (int heapSize = treeSize - 1; heapSize > 1; heapSize--)
	{
		swap (tree, 0, heapSize);
		cout << "lel" <<endl;
		push_down (tree, heapSize - 1);
	}
	show_heap (tree, treeSize);
}

void dnf (vector<Track>& data, int first, int last, int& red, int& blue)
{
    red  = first - 1;
    blue = last + 1;
    int white = last + 1;
    const Track PIVOT = data[first + (last - first) / 2];

    while (red < white - 1)
    {
        const int NEXT = white - 1;
        if (data[NEXT] < PIVOT)
        {
            red++;
            swap (data, red, NEXT) ;
        }
        else if (data[NEXT] == PIVOT)
		{
			white--;
		}
        else
        {
            white--;
            blue--;
            swap (data, NEXT, blue);
        }
    }
}

void quicksort (vector<Track>& data, int first, int last)
{
    // Pre-conditions:
    assert (first >= 0 && last < size(data));
    /*Post-conditions:
      Data[first] ... data[last] is sorted.
    */
    if (first >= last)
        return;
    else {
        int red, blue;
        dnf       (data, first, last, red, blue);
        quicksort (data, first, red);
        quicksort (data, blue, last);
    }
}

/////////////////////////////End code for assignment 10 bonus/////////////////////////

/************************************************************************
*   de hoofdstructuur van het programma:
*       - lees bestand in
*       - sorteer bestand met insertion_sort / selection_sort / bubble_sort
*                          en 'normale' volgorde van Tracks
*                          en oplopend naar track-lengte
************************************************************************/
enum Sorteermethode {Insertion,Selection,Bubble,Heap,DNF,AantalMethoden};
string sorteermethode [] = {"insertion", "selection", "bubble", "heap", "DNF"} ;

Sorteermethode selecteer ()
{
    cout << "Kies een sorteermethode: " << endl ;
    for (int m = 0; m < AantalMethoden; m++)
        cout << m+1 << ": " << sorteermethode[m] << " sort" << endl ;
    int keuze ;
    cin >> keuze ;
    return static_cast<Sorteermethode>(keuze-1) ;
}

int main()
{
	int aantalLiedjes = lees_bestand ("Nummers.txt");
	if (aantalLiedjes < 0)
	{   cout << "Bestand inlezen mislukt. Programma termineert." << endl;
	    return aantalLiedjes;
    }

    ofstream outputfile;
    Sorteermethode m = selecteer ();
    cout << "Sorteren bestand met " << sorteermethode[m] << " sort" << endl;
    comparison_counter = 0;

    switch (m)
    {
        case Insertion: outputfile.open("insertion.txt"); insertion_sort(liedjes,aantalLiedjes,outputfile); break;
        case Selection: outputfile.open("selection.txt"); selection_sort(liedjes,aantalLiedjes,outputfile); break;
        case Bubble:    outputfile.open("bubble.txt");    bubble_sort   (liedjes,aantalLiedjes,outputfile); break;
		case Heap:		outputfile.open("heap.txt");      heap_sort     (liedjes,aantalLiedjes,outputfile); break;
		case DNF:       outputfile.open("DNF.txt");       quicksort     (liedjes,0,size(liedjes)-1);        break;
		default:        cout << "Huh?" << endl;
    }
    cout << "Bestand gesorteerd." << endl;
    toon_MuziekDB (liedjes,aantalLiedjes);
    cout << "Number of comparison operations: " << comparison_counter << endl;
	return 0;
}

//////////////////Part 4://///////////////////
/*  We used lower case convertion for comparisons (to ensure the tracks are sorted in alphabetic order), this is why
    some of our results in number of comparison operations will differ (because the tracks will be sorted in a different order).

    Number of comparison operations for each sorting algorithm and comparison definition:
                            Insertion sort  Selection sort  Bubble sort	Heap sort
Definition like in part 1:  15693657        15806253        14983850	x
Definition like in part 3:  7866513         15806253        15800582	x

In part 3 the insertion sort has fewer comparisons, probably because the Nummers.txt file is probably sorted almost completely oppositely,
which results in the algorithm having to perform fewer comparison operations for the inserting in the start of the sorted slice.
*/
/////////////////End part 4///////////////////

//////////////////Part 5://///////////////////
/*
Comparisons for definition like in part 1:
Insertion:
.
.
.
.
*.
*.
**.
***.
****.
****.
******.
*******.
********.
*********.
***********.
************.
**************.
****************.
*****************.
*******************.
*********************.
************************.
**************************.
****************************.
*******************************.
*********************************.
************************************.
***************************************.
*****************************************.
********************************************.
***********************************************.
***************************************************.
******************************************************.
*********************************************************.
*************************************************************.
****************************************************************.
********************************************************************.
************************************************************************.
***************************************************************************.
*******************************************************************************.
***********************************************************************************.
****************************************************************************************.
********************************************************************************************.
************************************************************************************************.
*****************************************************************************************************.
*********************************************************************************************************.
**************************************************************************************************************.
*******************************************************************************************************************.
***********************************************************************************************************************.
****************************************************************************************************************************.
*********************************************************************************************************************************.
**************************************************************************************************************************************.
********************************************************************************************************************************************.
*************************************************************************************************************************************************.
******************************************************************************************************************************************************.
***********************************************************************************************************************************************************.

Selection:
*.
******.
************.
*****************.
**********************.
****************************.
*********************************.
**************************************.
******************************************.
***********************************************.
****************************************************.
********************************************************.
*************************************************************.
*****************************************************************.
*********************************************************************.
**************************************************************************.
******************************************************************************.
**********************************************************************************.
*************************************************************************************.
*****************************************************************************************.
*********************************************************************************************.
************************************************************************************************.
****************************************************************************************************.
*******************************************************************************************************.
**********************************************************************************************************.
**************************************************************************************************************.
*****************************************************************************************************************.
********************************************************************************************************************.
**********************************************************************************************************************.
*************************************************************************************************************************.
****************************************************************************************************************************.
******************************************************************************************************************************.
*********************************************************************************************************************************.
***********************************************************************************************************************************.
*************************************************************************************************************************************.
****************************************************************************************************************************************.
******************************************************************************************************************************************.
********************************************************************************************************************************************.
*********************************************************************************************************************************************.
***********************************************************************************************************************************************.
*************************************************************************************************************************************************.
**************************************************************************************************************************************************.
****************************************************************************************************************************************************.
*****************************************************************************************************************************************************.
******************************************************************************************************************************************************.
********************************************************************************************************************************************************.
*********************************************************************************************************************************************************.
**********************************************************************************************************************************************************.
**********************************************************************************************************************************************************.
***********************************************************************************************************************************************************.
************************************************************************************************************************************************************.
************************************************************************************************************************************************************.
*************************************************************************************************************************************************************.
*************************************************************************************************************************************************************.
*************************************************************************************************************************************************************.
**************************************************************************************************************************************************************.

Bubble:
*****.
***********.
****************.
*********************.
**************************.
*******************************.
************************************.
*****************************************.
**********************************************.
***************************************************.
*******************************************************.
************************************************************.
****************************************************************.
********************************************************************.
*************************************************************************.
*****************************************************************************.
*********************************************************************************.
*************************************************************************************.
****************************************************************************************.
********************************************************************************************.
************************************************************************************************.
***************************************************************************************************.
******************************************************************************************************.
**********************************************************************************************************.
*************************************************************************************************************.
****************************************************************************************************************.
*******************************************************************************************************************.
**********************************************************************************************************************.
*************************************************************************************************************************.
***************************************************************************************************************************.
******************************************************************************************************************************.
********************************************************************************************************************************.
***********************************************************************************************************************************.
*************************************************************************************************************************************.
***************************************************************************************************************************************.
*****************************************************************************************************************************************.
*******************************************************************************************************************************************.
*********************************************************************************************************************************************.
***********************************************************************************************************************************************.
************************************************************************************************************************************************.
**************************************************************************************************************************************************.
***************************************************************************************************************************************************.
*****************************************************************************************************************************************************.

Comparisons for definition like in part 3:
Insertion:
.
.
.
.
.
.
*.
*.
*.
**.
**.
***.
***.
*****.
******.
******.
*******.
********.
*********.
**********.
***********.
************.
*************.
**************.
****************.
*****************.
******************.
*******************.
*********************.
***********************.
************************.
*************************.
***************************.
****************************.
*******************************.
********************************.
**********************************.
************************************.
**************************************.
****************************************.
******************************************.
********************************************.
**********************************************.
************************************************.
**************************************************.
****************************************************.
*******************************************************.
**********************************************************.
************************************************************.
**************************************************************.
****************************************************************.
*******************************************************************.
**********************************************************************.
************************************************************************.
**************************************************************************.
******************************************************************************.

Selection:
*.
******.
************.
*****************.
**********************.
****************************.
*********************************.
**************************************.
******************************************.
***********************************************.
****************************************************.
********************************************************.
*************************************************************.
*****************************************************************.
*********************************************************************.
**************************************************************************.
******************************************************************************.
**********************************************************************************.
*************************************************************************************.
*****************************************************************************************.
*********************************************************************************************.
************************************************************************************************.
****************************************************************************************************.
*******************************************************************************************************.
**********************************************************************************************************.
**************************************************************************************************************.
*****************************************************************************************************************.
********************************************************************************************************************.
**********************************************************************************************************************.
*************************************************************************************************************************.
****************************************************************************************************************************.
******************************************************************************************************************************.
*********************************************************************************************************************************.
***********************************************************************************************************************************.
*************************************************************************************************************************************.
****************************************************************************************************************************************.
******************************************************************************************************************************************.
********************************************************************************************************************************************.
*********************************************************************************************************************************************.
***********************************************************************************************************************************************.
*************************************************************************************************************************************************.
**************************************************************************************************************************************************.
****************************************************************************************************************************************************.
*****************************************************************************************************************************************************.
******************************************************************************************************************************************************.
********************************************************************************************************************************************************.
*********************************************************************************************************************************************************.
**********************************************************************************************************************************************************.
**********************************************************************************************************************************************************.
***********************************************************************************************************************************************************.
************************************************************************************************************************************************************.
************************************************************************************************************************************************************.
*************************************************************************************************************************************************************.
*************************************************************************************************************************************************************.
*************************************************************************************************************************************************************.
**************************************************************************************************************************************************************.

Bubble:
*****.
***********.
****************.
*********************.
**************************.
*******************************.
************************************.
*****************************************.
**********************************************.
***************************************************.
*******************************************************.
************************************************************.
****************************************************************.
********************************************************************.
*************************************************************************.
*****************************************************************************.
*********************************************************************************.
*************************************************************************************.
****************************************************************************************.
********************************************************************************************.
************************************************************************************************.
***************************************************************************************************.
******************************************************************************************************.
**********************************************************************************************************.
*************************************************************************************************************.
****************************************************************************************************************.
*******************************************************************************************************************.
**********************************************************************************************************************.
*************************************************************************************************************************.
***************************************************************************************************************************.
******************************************************************************************************************************.
********************************************************************************************************************************.
***********************************************************************************************************************************.
*************************************************************************************************************************************.
***************************************************************************************************************************************.
*****************************************************************************************************************************************.
*******************************************************************************************************************************************.
*********************************************************************************************************************************************.
***********************************************************************************************************************************************.
************************************************************************************************************************************************.
**************************************************************************************************************************************************.
***************************************************************************************************************************************************.
*****************************************************************************************************************************************************.
******************************************************************************************************************************************************.
*******************************************************************************************************************************************************.
********************************************************************************************************************************************************.
*********************************************************************************************************************************************************.
**********************************************************************************************************************************************************.
***********************************************************************************************************************************************************.
************************************************************************************************************************************************************.
************************************************************************************************************************************************************.
*************************************************************************************************************************************************************.
*************************************************************************************************************************************************************.
*************************************************************************************************************************************************************.
*************************************************************************************************************************************************************.
///////////////End part 5////////////////

*/
